package uz.gita.contact_app_with_firebase.presenter.componentsimport android.net.Uriimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.borderimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.layout.widthimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.Deleteimport androidx.compose.material.icons.filled.Editimport androidx.compose.material3.Iconimport androidx.compose.material3.IconButtonimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.dpimport com.bumptech.glide.integration.compose.ExperimentalGlideComposeApiimport com.bumptech.glide.integration.compose.GlideImageimport uz.gita.contact_app_with_firebase.data.models.ContactParam@OptIn(ExperimentalGlideComposeApi::class)@Composablefun ContactItem(    contactParam: ContactParam,    onDeleteClick: (ContactParam) -> Unit = {},    onEditClick: (ContactParam) -> Unit = {},) {    Row(        modifier = Modifier            .fillMaxWidth()            .padding(8.dp)            .border(                width = 1.dp,                color = Color.LightGray,                shape = MaterialTheme.shapes.small            )            .background(MaterialTheme.colorScheme.background)            .clickable { /* Handle click action */ }            .padding(16.dp)    ) {        val uri = Uri.parse(contactParam.image)        GlideImage(            model = uri,            contentDescription = null,            modifier = Modifier                .size(48.dp)                .clip(MaterialTheme.shapes.small)        )        Spacer(modifier = Modifier.width(16.dp))        Column(            modifier = Modifier                .weight(1f)                .align(Alignment.CenterVertically)        ) {            Text(                text = contactParam.name,            )            Text(                text = contactParam.phone,                color = MaterialTheme.colorScheme.primary            )        }        Row {            IconButton(                onClick = { onEditClick(contactParam) }            ) {                Icon(                    imageVector = Icons.Default.Edit,                    contentDescription = "Edit",                    tint = Color.Gray                )            }            IconButton(                onClick = { onDeleteClick(contactParam) }            ) {                Icon(                    imageVector = Icons.Default.Delete,                    contentDescription = "Delete",                    tint = Color.Gray                )            }        }    }}@Composable@Preview(showBackground = true)fun ContactItemPreview() {    ContactItem(contactParam = ContactParam("", "", "name", "987"))}