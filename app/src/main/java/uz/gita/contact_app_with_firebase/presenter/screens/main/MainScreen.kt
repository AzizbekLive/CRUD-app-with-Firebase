package uz.gita.contact_app_with_firebase.presenter.screens.mainimport android.util.Logimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.itemsimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.Addimport androidx.compose.material3.CircularProgressIndicatorimport androidx.compose.material3.FloatingActionButtonimport androidx.compose.material3.Iconimport androidx.compose.runtime.Composableimport androidx.compose.runtime.Stateimport androidx.compose.runtime.collectAsStateimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.unit.dpimport cafe.adriel.voyager.androidx.AndroidScreenimport cafe.adriel.voyager.hilt.getViewModelimport uz.gita.contact_app_with_firebase.presenter.components.ContactItemclass MainScreen : AndroidScreen() {    @Composable    override fun Content() {        Log.d("TTT", "Content: ")        val viewModel: MainContract.ViewModel = getViewModel<MainViewModel>()        MainScreenContent(            uiState = viewModel.uiState.collectAsState(),            onEventDispatcher = viewModel::onEventDispatcher        )    }}@Composablefun MainScreenContent(    uiState: State<MainContract.UIState>,    onEventDispatcher: (MainContract.Intent) -> Unit = {},) {    onEventDispatcher.invoke(MainContract.Intent.LoadContacts)    if (uiState.value.ls.isEmpty()) {        Box(modifier = Modifier.fillMaxSize()) {            CircularProgressIndicator(                modifier = Modifier                    .align(Alignment.Center)                    .size(100.dp)            )        }    } else {        LazyColumn {            Log.d("TTT", "MainScreenContent: ${uiState.value.ls.size}")            items(uiState.value.ls) { it ->                ContactItem(                    contactParam = it,                    onDeleteClick = {                        onEventDispatcher.invoke(MainContract.Intent.DeleteContact(it))                        onEventDispatcher.invoke(MainContract.Intent.LoadContacts)                    },                    onEditClick = {                        onEventDispatcher.invoke(MainContract.Intent.MoveToUpdate(it))                    }                )            }        }        Box(modifier = Modifier.fillMaxSize()) {            FloatingActionButton(                onClick = { onEventDispatcher.invoke(MainContract.Intent.MoveToAdd) },                modifier = Modifier                    .align(Alignment.BottomEnd)                    .padding(20.dp)            ) {                Icon(                    imageVector = Icons.Default.Add,                    contentDescription = "Add",                    tint = Color.Gray                )            }        }    }}