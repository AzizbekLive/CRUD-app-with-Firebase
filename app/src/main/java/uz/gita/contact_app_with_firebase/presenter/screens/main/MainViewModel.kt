package uz.gita.contact_app_with_firebase.presenter.screens.mainimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.launchInimport kotlinx.coroutines.flow.onEachimport kotlinx.coroutines.flow.updateimport kotlinx.coroutines.launchimport uz.gita.contact_app_with_firebase.domain.usecase.DeleteUseCaseimport uz.gita.contact_app_with_firebase.domain.usecase.GetContactsUseCaseimport javax.inject.Inject@HiltViewModelclass MainViewModel @Inject constructor(    private val useCase: GetContactsUseCase,    private val direction: MainContract.MainDirection,    private val deleteUseCase: DeleteUseCase,) : MainContract.ViewModel, ViewModel() {    override val uiState = MutableStateFlow(MainContract.UIState())    override fun onEventDispatcher(intent: MainContract.Intent) {        when (intent) {            is MainContract.Intent.MoveToUpdate -> {                viewModelScope.launch {                    direction.openUpdateScreen(intent.contactParam)                }            }            MainContract.Intent.MoveToAdd -> {                viewModelScope.launch {                    direction.openAddScreen()                }            }            is MainContract.Intent.DeleteContact -> {                viewModelScope.launch {                    deleteUseCase.invoke(intent.contactParam.id)                }            }            MainContract.Intent.LoadContacts -> {                viewModelScope.launch(Dispatchers.IO) {                    useCase.invoke().onEach {                        it.onSuccess {                            uiState.update { uiState ->                                uiState.copy(ls = it)                            }                        }                    }.launchIn(viewModelScope)                }            }        }    }    init {        viewModelScope.launch(Dispatchers.IO) {            useCase.invoke().onEach {                it.onSuccess {                    uiState.update { uiState ->                        uiState.copy(ls = it)                    }                }            }.launchIn(viewModelScope)        }    }}