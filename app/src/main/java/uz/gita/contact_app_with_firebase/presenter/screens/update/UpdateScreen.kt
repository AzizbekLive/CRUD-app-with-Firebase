package uz.gita.contact_app_with_firebase.presenter.screens.updateimport android.net.Uriimport androidx.activity.compose.rememberLauncherForActivityResultimport androidx.activity.result.contract.ActivityResultContractsimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.widthimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.foundation.text.KeyboardOptionsimport androidx.compose.material3.Buttonimport androidx.compose.material3.OutlinedTextFieldimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.setValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.text.input.KeyboardTypeimport androidx.compose.ui.unit.dpimport cafe.adriel.voyager.androidx.AndroidScreenimport cafe.adriel.voyager.hilt.getViewModelimport com.bumptech.glide.integration.compose.ExperimentalGlideComposeApiimport com.bumptech.glide.integration.compose.GlideImageimport com.bumptech.glide.integration.compose.placeholderimport uz.gita.contact_app_with_firebase.Rimport uz.gita.contact_app_with_firebase.data.models.ContactParamimport uz.gita.contact_app_with_firebase.utils.MaskedPhoneTextFieldimport java.io.Serializableclass UpdateScreen(private val contactParam: ContactParam) : AndroidScreen(), Serializable {    @Composable    override fun Content() {        val viewModel: UpdateContract.ViewModel = getViewModel<UpdateViewModel>()        AddScreenContent(contactParam, viewModel::onEventDispatcher)    }}@OptIn(ExperimentalGlideComposeApi::class)@Composablefun AddScreenContent(    contactParam: ContactParam,    onEventDispatcher: (UpdateContract.Intent) -> Unit = {},) {    val uri = Uri.parse(contactParam.image)    var imageUri by remember {        mutableStateOf<Uri?>(uri)    }    val launcher = rememberLauncherForActivityResult(        contract =        ActivityResultContracts.GetContent()    ) { uri: Uri? ->        imageUri = uri    }    Box(modifier = Modifier.fillMaxSize()) {        Column(            modifier = Modifier                .fillMaxSize()                .padding(16.dp)                .align(Alignment.Center)        ) {            var name by remember { mutableStateOf(contactParam.name) }            var phone by remember { mutableStateOf(contactParam.phone) }            GlideImage(                model = imageUri,                contentDescription = null,                loading = placeholder(R.drawable.ic_launcher_background),                modifier = Modifier                    .padding(4.dp)                    .padding(top = 10.dp)                    .height(150.dp)                    .width(150.dp)                    .align(Alignment.CenterHorizontally)                    .clip(RoundedCornerShape(12.dp))                    .clickable {                        launcher.launch("image/*")                    },                contentScale = ContentScale.FillBounds            )//            Image(//                painter = painterResource(id = R.drawable.ic_launcher_background),//                contentDescription = "App Icon",//                modifier = Modifier//                    .size(120.dp)//                    .clip(MaterialTheme.shapes.medium)//                    .align(Alignment.CenterHorizontally)//            )            Spacer(modifier = Modifier.height(16.dp))            OutlinedTextField(                value = name,                onValueChange = { name = it },                label = { Text("Name") },                modifier = Modifier                    .fillMaxWidth()            )            Spacer(modifier = Modifier.height(16.dp))//            MaskedPhoneTextField(//                phone = phone,//                onValueChange = {//                    if (it.length < 14)//                        phone = it//                },//                modifier = Modifier//                    .fillMaxWidth()//            )            OutlinedTextField(                value = phone,                onValueChange = {                    if (it.length < 14)                        phone = it                },                label = { Text("Phone") },                keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Phone),                modifier = Modifier                    .fillMaxWidth()            )            Spacer(modifier = Modifier.height(32.dp))            Button(                onClick = {                    onEventDispatcher.invoke(                        UpdateContract.Intent.UpdateContact(                            contactParam.id,                            imageUri.toString(), name, phone                        )                    )                    onEventDispatcher.invoke(UpdateContract.Intent.MoveToMainScreen)                },                modifier = Modifier                    .fillMaxWidth()            ) {                Text("Update Contact")            }        }    }}